##################################################################################################################################
# PBLUP using PEVMEAN sampling with k-fold cross validation
#################################################################################################################################
rm(list=ls()) 
setwd("D:/OneDrive - CGIAR/GBLUP project/SSD-Hiaal Tropics/Cleaned_data/Relationship matrix")

# Obtaining APED

#import pedigree data
pedigree<-read.table("Pedigree.txt",h=TRUE) 
head(pedigree)
tail(pedigree)

#install nadiv package if using for the first time
#library(remotes)
#library(devtools)
#install_gitAub("matthewwolak/nadiv", ref = "devel")

#load the library
library(nadiv)
A <- AGHmatrix::Amatrix(data = pedigree[,1:3])

A[1:30,1:30]

A[1:15,1:15]
dim(A)

# Get heatmap for A
library(ASRgenomics)
#ASRgenomics::kinship.heatmap(A)

# diagnostics of A
check_A <- kinship.diagnostics(K=A)

ls(check_A)
check_A$list.diagonal
check_A$plot.diag
check_A$plot.offdiag  
check_A$list.duplicate


##################################################################################################################################
# Population Structure with Genomic Data
##################################################################################################################################

# using A matrix 
A[1:5, 1:5] # Note we are using G_align ...
pca_A_SSDF6 <- kinship.pca(K= A,ncp = 707)

pca_A_SSDF6$eigenvalues 
pca_A_SSDF6$plot.scree 
pca_A_SSDF6$plot.pca


head(pca_A_SSDF6$pca.scores)

pca.score_A <- as.data.frame(pca_A_SSDF6$pca.scores)
write.table(pca.score_A  , file = "pca_score_A.csv", row.names = T)


##############################################################################################################################################################################
# Fitting a pedigree-BLUP model (PGBLUP) with ASReml-R
##############################################################################################################################################################################
library(AGHmatrix)
A[1:30, 1:30]


check_A <- kinship.diagnostics(K = A,  diagonal.thr.small = 0.8,
                               diagonal.thr.large = 1.2, duplicate.thr = 0.95)
check_A$plot.diag     # aligned
check_A$plot.offdiag  # aligned


#################################
## Verification with the G-inverse

#Ainv <- ainverse(pedigree[,1:3])

Ainv <- G.inverse(G=A, sparseform=FALSE)$Ginv
head(Ainv)
head(attr(Ainv, "rowNames"))
head(attr(Ainv, "colNames"))
attr(Ainv, "INVERSE")


######################################################
# Obtaining inverse sparse matrix for ASReml-R
Ainv.sparse <- G.inverse(G=A, sparseform=TRUE)$Ginv

head(Ainv)
head(attr(Ainv, "rowNames"))
head(attr(Ainv, "colNames"))
attr(Ainv, "INVERSE")


pheno.A <- match.kinship2pheno(K = A, pheno.data = pheno,
                               indiv = 'GenoID', clean = FALSE, mism = TRUE)
head(pheno.A$matchesP)
pheno.subsetA <- pheno[pheno.A$matchesP, ]
dim(pheno.subsetA)
head(pheno.subsetA)

# k-fold cross-validation for HGBLUP
# set number of iterations
#asreml.options(gammaPar=FALSE)
# set number of iterations
num_iterationsAopt <- 10
pheno.subsetA_sorted <- pheno.subsetA[order(pheno.subsetA$GenoID),]

library(STPGA)
library(dplyr)

# Select the first 100 principal components for error variance estimation
selected_pcs_A <- pca.score_A[, 1:100]
selected_pc100_A <- as.matrix(selected_pcs_A)

# Create a data frame with GenoID column and num_iterationsG  additional columns

# Create a data frame with GenoID column and n additional columns to store FB_GEBV and FB_SE for training set
combA_IT_training_opt <- data.frame(GenoID = pheno.subsetA_sorted$GenoID, FB = pheno.subsetA_sorted$FB, stringsAsFactors = FALSE)
combA_IT_SE_training_opt <- data.frame(GenoID = pheno.subsetA_sorted$GenoID, stringsAsFactors = FALSE)

# Create a data frame with GenoID column and n additional columns to store FB_GEBV and FB_SE for testing set
combA_IT_testing_opt <- data.frame(GenoID = pheno.subsetA_sorted$GenoID, FB = pheno.subsetA_sorted$FB, stringsAsFactors = FALSE)
combA_IT_SE_testing_opt <- data.frame(GenoID = pheno.subsetA_sorted$GenoID, stringsAsFactors = FALSE)


# Prepare data for cross-validation
pheno.subsetA_sorted <- pheno.subsetA[order(pheno.subsetA$GenoID),]
kA <- 5
nA <- length(pheno.subsetA_sorted$GenoID)
selA <- rep(1:kA, length.out = nA) # tAis will shuffle the fold assignments

yA <- data.frame(GenoID = pheno.subsetA_sorted$GenoID, FB = pheno.subsetA_sorted$FB)   # Response variable

# Initialize data frames to store predicted values
#predictionsH_training <- data.frame(GenoID = pheno.subsetA_sorted$GenoID, FB_obs = pheno.subsetA_sorted$FB, FB_HGEBV = rep(NA, nG), FB_SE = rep(NA, nG))
#predictionsH_testing <- data.frame(GenoID = pheno.subsetA_sorted$GenoID, FB_obs = pheno.subsetA_sorted$FB, FB_HGEBV = rep(NA, nG), FB_SE = rep(NA, nG), fold = rep(NA, nG))
h2_optAcv_Cullis <- matrix(data=NA, nrow=kA, ncol=1)
h2_optAcv_stand <- matrix(data=NA, nrow=kA, ncol=1)
PA_optA_training <- matrix(data=NA, nrow=kA, ncol=1)
PA_optA_testing <- matrix(data=NA, nrow=kA, ncol=1)
Trainset_A_opt <- matrix(data=NA, nrow=kA*num_iterationsAopt, ncol=1)
Testset_A_opt <- matrix(data=NA, nrow=kA*num_iterationsAopt, ncol=1)

# Initialize variables to store cumulative results for interation
total_h2_optAcv_Cullis <- matrix(data=NA, nrow = num_iterationsAopt, ncol=1)
total_h2_optAcv_stand <- matrix(data=NA, nrow = num_iterationsAopt, ncol=1)
total_PA_optA_training <- matrix(data=NA, nrow = num_iterationsAopt, ncol=1)
total_PA_optA_testing <- matrix(data=NA, nrow = num_iterationsAopt, ncol=1)
total_optAACC_Cullis_training <- matrix(data=NA, nrow = num_iterationsAopt, ncol=1)
total_optAACC_stand_training <- matrix(data=NA, nrow = num_iterationsAopt, ncol=1)
total_optAACC_Cullis_testing <- matrix(data=NA, nrow = num_iterationsAopt, ncol=1)
total_optAACC_stand_testing <- matrix(data=NA, nrow = num_iterationsAopt, ncol=1)

# Main loop for cross-validation iterations
for (iteration in 1:num_iterationsAopt){
  
  # Sample data into k groups for cross-validation
  groupA <- sample(selA, nA)
  table(groupA) 
  
  # Fit GBLUP model and evaluate performance for each group
  for (fold in 1:kA){
    
    # Split the data into training and validation sets
    trainingA_indices <- which(selA != fold)
    validationA_indices <- which(selA == fold)
    
    # Extract training and validation data
    
    trainingA_data <- pheno.subsetA_sorted[selA != fold, ]
    validationA_data <- pheno.subsetA_sorted[selA == fold, ]
    
    # Use GenAlgForSubsetSelection function with PEVMEAN optimality criterion
    Candidates_A <- pheno.subsetA_sorted$GenoID
    nA_train <- length(trainingA_data$GenoID)
    Test_A <- validationA_data$GenoID
    Trainopt_A <- GenAlgForSubsetSelection(P=selected_pc100_A[rownames(selected_pc100_A)%in%Candidates_A,],
                                           Candidates=Candidates_A,
                                           Test=Test_A,
                                           ntoselect=2200, 
                                           InitPop=NULL,
                                           npop=100, 
                                           nelite=5, 
                                           mutprob=.8, 
                                           mutintensity = 1,
                                           niterations=300,
                                           minitbefstop=100, 
                                           tabumemsize = 1,
                                           plotiters=FALSE,
                                           lambda=1e-6,
                                           errorstat="PEVMEAN", 
                                           mc.cores = 8)
    
    TrainID_A <- as.data.frame(Trainopt_A$`Solution with rank 1`)
    names(TrainID_A)[1] = "GenoID"
    
    # Convert GenoID columns to character type
    TrainID_A$GenoID <- as.character(TrainID_A$GenoID)
    trainingA_data$GenoID <- as.character(trainingA_data$GenoID)
    validationA_data$GenoID <- as.character(validationA_data$GenoID)
    
    # Exclude individuals from Train_G tAat are present in validation_data
    Train_A <- trainingA_data[(trainingA_data$GenoID %in% TrainID_A$GenoID), ]
    
    nA_trainF <- length(Train_A$GenoID)
    
    # Exclude individuals from Train_G tAat are present in validation_data
    excluded_individuals_A <- trainingH_data[!(trainingA_data$GenoID %in% TrainID_A$GenoID), ]
    
    
    # Add excluded individuals to validation set
    validationA_dataF <- rbind(validationA_data, excluded_individuals_A)%>% distinct()
    nA_testF <- length(validationA_dataF$GenoID)
    
    Trainset_A_opt[[paste0(fold,"_",iteration)]] <- nA_trainF
    Testset_A_opt[[paste0(fold,"_",iteration)]] <- nA_testF
    
    #length(unique(validationH_dataF$GenoID))
    
    yA_train_opt <- Train_A$FB
    yA_test_opt <- validationA_dataF$FB
    
    
    
    # Initialize data frames to store predicted values
    predictionsA_training_opt <- data.frame(GenoID = Train_A$GenoID, FB_obs = Train_A$FB, FB_GEBV = rep(NA, nA_trainF), FB_SE = rep(NA, nA_trainF))
    predictionsA_testing_opt <- data.frame(GenoID = validationA_dataF$GenoID, FB_obs = validationA_dataF$FB, FB_GEBV = rep(NA, nA_testF), FB_SE = rep(NA, nA_testF), fold = rep(NA, nA_testF))
    
    yAcv_opt <- Train_A$FB
    
    for (j in 1:nA_trainF) {
      if(groupH[j] == fold) { yAcv_opt[j]<-NA }
    }
    
    # Implement GBLUP model fitting and evaluation here
    Train_A$GenoID <- as.factor(Train_A$GenoID)
    Train_A$Family <- as.factor(Train_A$Family)
    PBLUPcv_opt <- asreml(fixed = yAcv_opt ~ 1, #+ Family,
                          random = ~vm(GenoID, Ainv.sparse) + Family,
                          residual = ~idv(units,init = 0.3),
                          na.action = na.method(x = 'include', y = 'include'),
                          workspace = 1e07,
                          pworkspace=32e6,
                          data = Train_A,
                          start = list(GenoID = 9, Family = 1))
    
    #ssGBLUPcv_opt_opt <- update.asreml(ssGBLUPcv_opt_opt)
    #HGBLUPcv_opt <- update.asreml(ssGBLUPcv_opt)
    #HGBLUPcv_opt <- update.asreml(ssGBLUPcv_opt)
    #HGBLUPcv_opt <- update.asreml(ssGBLUPcv_opt)
    #HGBLUPcv_opt <- update.asreml(ssGBLUPcv_opt)
    #HGEBVcv_opt <- as.data.frame(summary(ssGBLUPcv_opt, coef=TRUE)$coef.random)
    #HGEBVcv_opt <- HGEBVcv_opt[order(rownames(HGEBVcv_opt)),]
    #HGEBVcv_opt <- HGEBVcv_opt[,1]
    
    # Predict on the training set
    predAcv_opt <- predict(PBLUPcv_opt, classify="GenoID", sed=T, pworkspace = 32e36)
    predPBLUPcv1_opt <- predAcv_opt$pvals
    predPBLUPcv_opt <- as.data.frame(predPBLUPcv1_opt[,1:3])
    
    # Extract genetic variance and avsed
    varcomp_PBLUPcv_opt <- as.data.frame(summary(PBLUPcv_opt)$varcomp)
    varg_PBLUPcv_opt <- varcomp_PBLUPcv_opt[2,1]
    
    #Extract avsed
    avsed_PBLUPcv1_opt <- as.data.frame(predAcv_opt$avsed)
    avsed_PBLUPcv_opt <-  avsed_PBLUPcv1_opt[2,1]
    
    # Estimate heritability using Cullis et al. and the standard approach
    (h2_PBLUPcv_opt_Cullis <- vpredict(PBLUPcv_opt,h2~varg_PBLUPcv_opt/(varg_PBLUPcv_opt + (avsed_PBLUPcv_opt)/2)))
    (h2_optAcv_Cullis[fold] <- as.numeric(h2_PBLUPcv_opt_Cullis[1]))
    
    # standard approach
    h2_PBLUPcv_opt_stand <- varcomp_PBLUPcv_opt['vm(GenoID, Ainv.sparse)', 'component'] / 
      (varcomp_PBLUPcv_opt['vm(GenoID, Ainv.sparse)', 'component'] + varcomp_PBLUPcv_opt['Family', 'component'] + 
         varcomp_PBLUPcv_opt['units!units', 'component'])
    
    (h2_optAcv_stand[fold] <- as.numeric(h2_PBLUPcv_opt_stand[1]))
    
    # Convert GenoID columns to character type
    predictionsA_training_opt$GenoID <- as.character(predictionsA_training_opt$GenoID)
    predPBLUPcv_opt$GenoID <- as.character(predPBLUPcv_opt$GenoID)
    
    # Merge predHGBLUPcv with predictions_training based on GenoID
    predPBLUPcvF_training_opt <- merge(predPBLUPcv_opt, predictionsA_training_opt, by = "GenoID", all.x = TRUE)
    
    # Predictive Ability  corr(yadj,ghat) training
    (PA_optA_training[fold] <- cor(predPBLUPcvF_training_opt$FB_obs, predPBLUPcvF_training_opt$predicted.value, method='pearson', use="complete.obs"))
    
    for (j in 1:nA_trainF) {
      #if(groupG[j] == fold) { predictions_training[j] <- GEBVcv[j] } 
      if(groupA[j] == fold) { 
        predictionsA_training_opt$FB_PEBV[predictionsA_training_opt$GenoID == predPBLUPcvF_training_opt$GenoID[j]] <- predPBLUPcvF_training_opt$predicted.value[j]
        predictionsA_training_opt$SE_PEBV[predictionsA_training_opt$GenoID == predPBLUPcvF_training_opt$GenoID[j]] <- predPBLUPcvF_training_opt$std.error[j]} 
    }
    
    # Predict the validation set
    validationA_pred_opt <- predict(PBLUPcv_opt, 
                                    classify="GenoID", 
                                    sed=T, 
                                    newdata = validationA_dataF, 
                                    pworkspace = 32e36)
    
    predPBLUPcv_testing1_opt <- validationA_pred_opt$pvals
    predPBLUPcv_testing_opt <- as.data.frame(predPBLUPcv_testing1_opt[,1:3])
    
    # Convert GenoID columns to character type
    predictionsA_testing_opt$GenoID <- as.character(predictionsA_testing_opt$GenoID)
    predPBLUPcv_testing_opt$GenoID <- as.character(predPBLUPcv_testing_opt$GenoID)
    
    # Merge predHGBLUPcv with predictions_testing based on GenoID
    predPBLUPcvF_testing_opt <- merge(predPBLUPcv_testing_opt, predictionsA_testing_opt, by = "GenoID", all.x = TRUE)
    
    (PA_optA_testing[fold] <- cor(predPBLUPcvF_testing_opt$FB_obs, predPBLUPcvF_testing_opt$predicted.value, method='pearson', use="complete.obs"))
    
    for (z in 1:nA_testF) {
      # insert predicted values into predictions_testing
      if (predPBLUPcv_testing_opt$GenoID[z] %in% predictionsA_testing_opt$GenoID) {
        predictionsA_testing_opt$FB_PEBV[predictionsA_testing_opt$GenoID == predPBLUPcvF_testing_opt$GenoID[z]] <- predPBLUPcv_testing_opt$predicted.value[z]
        predictionsA_testing_opt$SE_PEBV[predictionsA_testing_opt$GenoID == predPBLUPcvF_testing_opt$GenoID[z]] <- predPBLUPcv_testing_opt$std.error[z]
        predictionsA_testing_opt$Fold[predictionsA_testing_opt$GenoID == predPBLUPcvF_testing_opt$GenoID[z]] <- fold
      }
    }
  }
  
  # Heritability (GS cross-validation)
  h2_optAcv_Cullis
  mean(h2_optAcv_Cullis)
  h2_optAcv_stand
  mean(h2_optAcv_stand)
  PA_optA_training
  mean(PA_optA_training)
  PA_optA_testing
  mean(PA_optA_testing)
  
  # Predictive Accuracy corr(greal,ghat)
  (ACC_optA_Cullis_training <- PA_optA_training/sqrt(mean(h2_optAcv_Cullis)))  # Approximation
  (ACC_optA_stand_training <- PA_optA_training/sqrt(mean(h2_optAcv_stand)))  # Approximation
  
  (ACC_optA_Cullis_testing <- PA_optA_testing/sqrt(mean(h2_optAcv_Cullis)))  # Approximation
  (ACC_optA_stand_testing <- PA_optA_testing/sqrt(mean(h2_optAcv_stand)))  # Approximation
  
  # Update cumulative results at the end of each iteration
  total_h2_optAcv_Cullis[iteration] <- mean(h2_optAcv_Cullis)
  total_h2_optAcv_stand[iteration] <- mean(h2_optAcv_stand)
  total_PA_optA_training[iteration] <- mean(PA_optA_training)
  total_PA_optA_testing[iteration] <- mean(PA_optA_testing)
  total_optAACC_Cullis_training[iteration] <- ACC_optA_Cullis_training
  total_optAACC_Cullis_testing[iteration] <- ACC_optA_Cullis_testing
  total_optAACC_stand_training[iteration] <- ACC_optA_stand_training
  total_optAACC_stand_testing[iteration] <- ACC_optA_stand_testing
  
  # Store FB_GEBV and SE_GEBV values for each iteration in training set
  for (p in 1:nrow(predPBLUPcvF_training_opt)) {
    if (predPBLUPcvF_training_opt$GenoID[p] %in% combA_IT_training_opt$GenoID) {
      index <- which(combA_IT_training_opt$GenoID == predPBLUPcvF_training_opt$GenoID[p])
      combA_IT_training_opt[[paste0("FB_PEBV_", iteration)]][index] <- predPBLUPcvF_training_opt$predicted.value[p]
      combA_IT_SE_training_opt[[paste0("SE_PEBV_", iteration)]][index] <- predPBLUPcvF_training_opt$std.error[p]
    } else {
      cat("GenoID", predPBLUPcvF_training_opt$GenoID[j], "not found in combG_IT_training_opt\n")
    }
  }
  
  # Store FB_GEBV and SE_GEBV values for each iteration in testing_opt set
  for (p in 1:nrow(predPBLUPcvF_testing_opt)) {
    if (predPBLUPcvF_testing_opt$GenoID[p] %in% combA_IT_testing_opt$GenoID) {
      index <- which(combA_IT_testing_opt$GenoID == predPBLUPcvF_testing_opt$GenoID[p])
      combA_IT_testing_opt[[paste0("FB_PEBV_", iteration)]][index] <- predPBLUPcvF_testing_opt$predicted.value[p]
      combA_IT_SE_testing_opt[[paste0("SE_PEBV_", iteration)]][index] <- predPBLUPcvF_testing_opt$std.error[p]
    } else {
      cat("GenoID", predPBLUPcvF_testing_opt$GenoID[j], "not found in combA_IT_testing_opt\n")
    }
  }
}

# Calculate row means of FB_GEBV over iterations
combA_IT_training_opt$FB_AGEBV_avg <- rowMeans(combA_IT_training_opt[, -(1:2)], na.rm = TRUE)
combA_IT_SE_training_opt$SE_AGEBV_avg <- rowMeans(combA_IT_SE_training_opt[, -1], na.rm = TRUE)
combA_training_final_opt <- merge(combA_IT_training_opt, combA_IT_SE_training_opt, by = "GenoID", all = TRUE)

combA_IT_testing_opt$FB_AGEBV_avg <- rowMeans(combA_IT_testing_opt[, -(1:2)], na.rm = TRUE)
combA_IT_SE_testing_opt$SE_AGEBV_avg <- rowMeans(combA_IT_SE_testing_opt[, -1], na.rm = TRUE)
combA_testing_final_opt <- merge(combA_IT_testing_opt, combA_IT_SE_testing_opt, by = "GenoID", all = TRUE)
tail(combA_testing_final_opt)

# merge by rows
write.table(combA_training_final_opt, file = "FB_AGBLUP_pred_training_opt.csv", row.names = F)
write.table(combA_testing_final_opt , file = "FB_AGBLUP_pred_testing_opt.csv", row.names = F)

# Calculate average values over all iterations
avg_h2_optAcv_Cullis <- mean(total_h2_optAcv_Cullis)
avg_h2_optAcv_stand <- mean(total_h2_optAcv_stand)
avg_PA_optA_training <- mean(total_PA_optA_training)
avg_PA_optA_testing <- mean(total_PA_optA_testing)
avg_optAACC_Cullis_training <- mean(total_optAACC_Cullis_training)
avg_optAACC_stand_training <- mean(total_optAACC_stand_training)
avg_optAACC_Cullis_testing <- mean(total_optAACC_Cullis_testing)
avg_optAACC_stand_testing <- mean(total_optAACC_stand_testing)

# Print or use the average values as needed
print(avg_h2_optAcv_Cullis)
print(avg_h2_optAcv_stand)
print(avg_PA_optA_training)
print(avg_PA_optA_testing)
print(avg_optAACC_Cullis_training)
print(avg_optAACC_stand_training)
print(avg_optAACC_Cullis_testing)
print(avg_optAACC_stand_testing)
